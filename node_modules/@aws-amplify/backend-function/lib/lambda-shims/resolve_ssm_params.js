/**
 * This code loads environment values from SSM and places them in their corresponding environment variables.
 * If there are no SSM environment values for this function, this is a noop.
 */
import { SSM } from '@aws-sdk/client-ssm';
/**
 * Reads SSM environment context from a known Amplify environment variable,
 * fetches values from SSM and places those values in the corresponding environment variables
 */
export const internalAmplifyFunctionResolveSsmParams = async (client = new SSM()) => {
    const envPathObject = JSON.parse(process.env.AMPLIFY_SSM_ENV_CONFIG ?? '{}');
    const paths = Object.keys(envPathObject);
    if (paths.length === 0) {
        return;
    }
    const resolveSecrets = async (paths) => {
        const response = await client.getParameters({
            Names: paths,
            WithDecryption: true,
        });
        if (response.Parameters && response.Parameters.length > 0) {
            for (const parameter of response.Parameters) {
                if (parameter.Name) {
                    const envKey = Object.keys(envPathObject).find((key) => envPathObject[key].sharedPath === parameter.Name);
                    const envName = envKey
                        ? envPathObject[envKey].name
                        : envPathObject[parameter.Name]?.name;
                    process.env[envName] = parameter.Value;
                }
            }
        }
        return response;
    };
    const response = await resolveSecrets(paths);
    const sharedPaths = (response?.InvalidParameters || [])
        .map((invalidParam) => envPathObject[invalidParam].sharedPath)
        .filter((sharedParam) => !!sharedParam); // this assertion is safe because we are filtering out undefined
    if (sharedPaths.length > 0) {
        await resolveSecrets(sharedPaths);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zc21fcGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xhbWJkYS1zaGltcy9yZXNvbHZlX3NzbV9wYXJhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzFDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUFHLEtBQUssRUFDMUQsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLEVBQ2xCLEVBQUU7SUFDRixNQUFNLGFBQWEsR0FBZSxJQUFJLENBQUMsS0FBSyxDQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixJQUFJLElBQUksQ0FDM0MsQ0FBQztJQUNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFekMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QixPQUFPO0tBQ1I7SUFFRCxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLEVBQUU7UUFDL0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQzFDLEtBQUssRUFBRSxLQUFLO1lBQ1osY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6RCxLQUFLLE1BQU0sU0FBUyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7Z0JBQzNDLElBQUksU0FBUyxDQUFDLElBQUksRUFBRTtvQkFDbEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQzVDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQzFELENBQUM7b0JBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTTt3QkFDcEIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJO3dCQUM1QixDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUM7b0JBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztpQkFDeEM7YUFDRjtTQUNGO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFN0MsTUFBTSxXQUFXLEdBQUcsQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLElBQUksRUFBRSxDQUFDO1NBQ3BELEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsQ0FBQztTQUM3RCxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQWEsQ0FBQyxDQUFDLGdFQUFnRTtJQUV2SCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzFCLE1BQU0sY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ25DO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGNvZGUgbG9hZHMgZW52aXJvbm1lbnQgdmFsdWVzIGZyb20gU1NNIGFuZCBwbGFjZXMgdGhlbSBpbiB0aGVpciBjb3JyZXNwb25kaW5nIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqIElmIHRoZXJlIGFyZSBubyBTU00gZW52aXJvbm1lbnQgdmFsdWVzIGZvciB0aGlzIGZ1bmN0aW9uLCB0aGlzIGlzIGEgbm9vcC5cbiAqL1xuaW1wb3J0IHsgU1NNIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXNzbSc7XG5pbXBvcnQgdHlwZSB7IFNzbUVudlZhcnMgfSBmcm9tICcuLi9mdW5jdGlvbl9lbnZfdHJhbnNsYXRvci5qcyc7XG5cbi8qKlxuICogUmVhZHMgU1NNIGVudmlyb25tZW50IGNvbnRleHQgZnJvbSBhIGtub3duIEFtcGxpZnkgZW52aXJvbm1lbnQgdmFyaWFibGUsXG4gKiBmZXRjaGVzIHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRob3NlIHZhbHVlcyBpbiB0aGUgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVybmFsQW1wbGlmeUZ1bmN0aW9uUmVzb2x2ZVNzbVBhcmFtcyA9IGFzeW5jIChcbiAgY2xpZW50ID0gbmV3IFNTTSgpXG4pID0+IHtcbiAgY29uc3QgZW52UGF0aE9iamVjdDogU3NtRW52VmFycyA9IEpTT04ucGFyc2UoXG4gICAgcHJvY2Vzcy5lbnYuQU1QTElGWV9TU01fRU5WX0NPTkZJRyA/PyAne30nXG4gICk7XG4gIGNvbnN0IHBhdGhzID0gT2JqZWN0LmtleXMoZW52UGF0aE9iamVjdCk7XG5cbiAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlc29sdmVTZWNyZXRzID0gYXN5bmMgKHBhdGhzOiBzdHJpbmdbXSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldFBhcmFtZXRlcnMoe1xuICAgICAgTmFtZXM6IHBhdGhzLFxuICAgICAgV2l0aERlY3J5cHRpb246IHRydWUsXG4gICAgfSk7XG5cbiAgICBpZiAocmVzcG9uc2UuUGFyYW1ldGVycyAmJiByZXNwb25zZS5QYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoY29uc3QgcGFyYW1ldGVyIG9mIHJlc3BvbnNlLlBhcmFtZXRlcnMpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlci5OYW1lKSB7XG4gICAgICAgICAgY29uc3QgZW52S2V5ID0gT2JqZWN0LmtleXMoZW52UGF0aE9iamVjdCkuZmluZChcbiAgICAgICAgICAgIChrZXkpID0+IGVudlBhdGhPYmplY3Rba2V5XS5zaGFyZWRQYXRoID09PSBwYXJhbWV0ZXIuTmFtZVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgZW52TmFtZSA9IGVudktleVxuICAgICAgICAgICAgPyBlbnZQYXRoT2JqZWN0W2VudktleV0ubmFtZVxuICAgICAgICAgICAgOiBlbnZQYXRoT2JqZWN0W3BhcmFtZXRlci5OYW1lXT8ubmFtZTtcbiAgICAgICAgICBwcm9jZXNzLmVudltlbnZOYW1lXSA9IHBhcmFtZXRlci5WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfTtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc29sdmVTZWNyZXRzKHBhdGhzKTtcblxuICBjb25zdCBzaGFyZWRQYXRocyA9IChyZXNwb25zZT8uSW52YWxpZFBhcmFtZXRlcnMgfHwgW10pXG4gICAgLm1hcCgoaW52YWxpZFBhcmFtKSA9PiBlbnZQYXRoT2JqZWN0W2ludmFsaWRQYXJhbV0uc2hhcmVkUGF0aClcbiAgICAuZmlsdGVyKChzaGFyZWRQYXJhbSkgPT4gISFzaGFyZWRQYXJhbSkgYXMgc3RyaW5nW107IC8vIHRoaXMgYXNzZXJ0aW9uIGlzIHNhZmUgYmVjYXVzZSB3ZSBhcmUgZmlsdGVyaW5nIG91dCB1bmRlZmluZWRcblxuICBpZiAoc2hhcmVkUGF0aHMubGVuZ3RoID4gMCkge1xuICAgIGF3YWl0IHJlc29sdmVTZWNyZXRzKHNoYXJlZFBhdGhzKTtcbiAgfVxufTtcbiJdfQ==