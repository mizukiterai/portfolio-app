import { AmplifyAuth, } from '@aws-amplify/auth-construct-alpha';
import * as path from 'path';
import { translateToAuthConstructLoginWith } from './translate_auth_props.js';
/**
 * Singleton factory for AmplifyAuth that can be used in Amplify project files
 */
class AmplifyAuthFactory {
    props;
    importStack;
    provides = 'AuthResources';
    generator;
    /**
     * Set the properties that will be used to initialize AmplifyAuth
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Get a singleton instance of AmplifyAuth
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'auth', 'resource'), 'Amplify Auth must be defined in amplify/auth/resource.ts');
        if (!this.generator) {
            this.generator = new AmplifyAuthGenerator(this.props, getInstanceProps);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class AmplifyAuthGenerator {
    props;
    getInstanceProps;
    resourceGroupName = 'auth';
    defaultName = 'amplifyAuth';
    constructor(props, getInstanceProps) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
    }
    generateContainerEntry = (scope, backendSecretResolver) => {
        const authProps = {
            ...this.props,
            loginWith: translateToAuthConstructLoginWith(this.props.loginWith, backendSecretResolver),
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        };
        const authConstruct = new AmplifyAuth(scope, this.defaultName, authProps);
        Object.entries(this.props.triggers || {}).forEach(([triggerEvent, handlerFactory]) => {
            authConstruct.addTrigger(triggerEvent, // this type assertion is necessary before .forEach types keys as just "string"
            handlerFactory.getInstance(this.getInstanceProps));
        });
        return authConstruct;
    };
}
/**
 * Provide the settings that will be used for authentication.
 */
export const defineAuth = (props) => new AmplifyAuthFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEdBR1osTUFBTSxtQ0FBbUMsQ0FBQztBQVUzQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQW9COUU7O0dBRUc7QUFDSCxNQUFNLGtCQUFrQjtJQVFIO0lBQ0E7SUFSVixRQUFRLEdBQUcsZUFBZSxDQUFDO0lBQzVCLFNBQVMsQ0FBbUM7SUFFcEQ7O09BRUc7SUFDSCxZQUNtQixLQUF1QixFQUN2QixjQUFjLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSztRQUQvQixVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7SUFDL0MsQ0FBQztJQUVKOztPQUVHO0lBQ0gsV0FBVyxHQUFHLENBQ1osZ0JBQWtELEVBQ3JDLEVBQUU7UUFDZixNQUFNLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQztRQUNwRSxrQkFBa0IsRUFBRSxNQUFNLENBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFDeEMsMERBQTBELENBQzNELENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBZ0IsQ0FBQztJQUN4RSxDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0sb0JBQW9CO0lBS0w7SUFDQTtJQUxWLGlCQUFpQixHQUFHLE1BQU0sQ0FBQztJQUNuQixXQUFXLEdBQUcsYUFBYSxDQUFDO0lBRTdDLFlBQ21CLEtBQXVCLEVBQ3ZCLGdCQUFrRDtRQURsRCxVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO0lBQ2xFLENBQUM7SUFFSixzQkFBc0IsR0FBRyxDQUN2QixLQUFnQixFQUNoQixxQkFBNEMsRUFDNUMsRUFBRTtRQUNGLE1BQU0sU0FBUyxHQUFjO1lBQzNCLEdBQUcsSUFBSSxDQUFDLEtBQUs7WUFDYixTQUFTLEVBQUUsaUNBQWlDLENBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUNwQixxQkFBcUIsQ0FDdEI7WUFDRCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCO1NBQ25FLENBQUM7UUFFRixNQUFNLGFBQWEsR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FDL0MsQ0FBQyxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFO1lBQ2pDLGFBQWEsQ0FBQyxVQUFVLENBQ3RCLFlBQTRCLEVBQUUsK0VBQStFO1lBQzdHLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQ2xELENBQUM7UUFDSixDQUFDLENBQ0YsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztDQUNIO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsS0FBdUIsRUFDUSxFQUFFLENBQ2pDLElBQUksa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbXBsaWZ5QXV0aCxcbiAgQXV0aFByb3BzLFxuICBUcmlnZ2VyRXZlbnQsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9hdXRoLWNvbnN0cnVjdC1hbHBoYSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7XG4gIEJhY2tlbmRTZWNyZXRSZXNvbHZlcixcbiAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gIENvbnN0cnVjdEZhY3RvcnksXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBGdW5jdGlvblJlc291cmNlcyxcbiAgUmVzb3VyY2VQcm92aWRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQXV0aExvZ2luV2l0aEZhY3RvcnlQcm9wcywgRXhwYW5kIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGVUb0F1dGhDb25zdHJ1Y3RMb2dpbldpdGggfSBmcm9tICcuL3RyYW5zbGF0ZV9hdXRoX3Byb3BzLmpzJztcblxuZXhwb3J0IHR5cGUgQW1wbGlmeUF1dGhQcm9wcyA9IEV4cGFuZDxcbiAgT21pdDxBdXRoUHJvcHMsICdvdXRwdXRTdG9yYWdlU3RyYXRlZ3knIHwgJ2xvZ2luV2l0aCc+ICYge1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgaG93IHlvdSB3b3VsZCBsaWtlIHVzZXJzIHRvIGxvZyBpbi4gWW91IGNhbiBjaG9vc2UgZnJvbSBlbWFpbCwgcGhvbmUsIGFuZCBldmVuIGV4dGVybmFsIHByb3ZpZGVycyBzdWNoIGFzIExvZ2luV2l0aEFtYXpvbi5cbiAgICAgKi9cbiAgICBsb2dpbldpdGg6IEV4cGFuZDxBdXRoTG9naW5XaXRoRmFjdG9yeVByb3BzPjtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmUgY3VzdG9tIGF1dGggdHJpZ2dlcnNcbiAgICAgKi9cbiAgICB0cmlnZ2Vycz86IFBhcnRpYWw8XG4gICAgICBSZWNvcmQ8XG4gICAgICAgIFRyaWdnZXJFdmVudCxcbiAgICAgICAgQ29uc3RydWN0RmFjdG9yeTxSZXNvdXJjZVByb3ZpZGVyPEZ1bmN0aW9uUmVzb3VyY2VzPj5cbiAgICAgID5cbiAgICA+O1xuICB9XG4+O1xuXG4vKipcbiAqIFNpbmdsZXRvbiBmYWN0b3J5IGZvciBBbXBsaWZ5QXV0aCB0aGF0IGNhbiBiZSB1c2VkIGluIEFtcGxpZnkgcHJvamVjdCBmaWxlc1xuICovXG5jbGFzcyBBbXBsaWZ5QXV0aEZhY3RvcnkgaW1wbGVtZW50cyBDb25zdHJ1Y3RGYWN0b3J5PEFtcGxpZnlBdXRoPiB7XG4gIHJlYWRvbmx5IHByb3ZpZGVzID0gJ0F1dGhSZXNvdXJjZXMnO1xuICBwcml2YXRlIGdlbmVyYXRvcjogQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3I7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplIEFtcGxpZnlBdXRoXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBBbXBsaWZ5QXV0aFByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW1wb3J0U3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFja1xuICApIHt9XG5cbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBBbXBsaWZ5QXV0aFxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgPSAoXG4gICAgZ2V0SW5zdGFuY2VQcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHNcbiAgKTogQW1wbGlmeUF1dGggPT4ge1xuICAgIGNvbnN0IHsgY29uc3RydWN0Q29udGFpbmVyLCBpbXBvcnRQYXRoVmVyaWZpZXIgfSA9IGdldEluc3RhbmNlUHJvcHM7XG4gICAgaW1wb3J0UGF0aFZlcmlmaWVyPy52ZXJpZnkoXG4gICAgICB0aGlzLmltcG9ydFN0YWNrLFxuICAgICAgcGF0aC5qb2luKCdhbXBsaWZ5JywgJ2F1dGgnLCAncmVzb3VyY2UnKSxcbiAgICAgICdBbXBsaWZ5IEF1dGggbXVzdCBiZSBkZWZpbmVkIGluIGFtcGxpZnkvYXV0aC9yZXNvdXJjZS50cydcbiAgICApO1xuICAgIGlmICghdGhpcy5nZW5lcmF0b3IpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdG9yID0gbmV3IEFtcGxpZnlBdXRoR2VuZXJhdG9yKHRoaXMucHJvcHMsIGdldEluc3RhbmNlUHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gY29uc3RydWN0Q29udGFpbmVyLmdldE9yQ29tcHV0ZSh0aGlzLmdlbmVyYXRvcikgYXMgQW1wbGlmeUF1dGg7XG4gIH07XG59XG5cbmNsYXNzIEFtcGxpZnlBdXRoR2VuZXJhdG9yIGltcGxlbWVudHMgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3Ige1xuICByZWFkb25seSByZXNvdXJjZUdyb3VwTmFtZSA9ICdhdXRoJztcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0TmFtZSA9ICdhbXBsaWZ5QXV0aCc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogQW1wbGlmeUF1dGhQcm9wcyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldEluc3RhbmNlUHJvcHM6IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzXG4gICkge31cblxuICBnZW5lcmF0ZUNvbnRhaW5lckVudHJ5ID0gKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgYmFja2VuZFNlY3JldFJlc29sdmVyOiBCYWNrZW5kU2VjcmV0UmVzb2x2ZXJcbiAgKSA9PiB7XG4gICAgY29uc3QgYXV0aFByb3BzOiBBdXRoUHJvcHMgPSB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgbG9naW5XaXRoOiB0cmFuc2xhdGVUb0F1dGhDb25zdHJ1Y3RMb2dpbldpdGgoXG4gICAgICAgIHRoaXMucHJvcHMubG9naW5XaXRoLFxuICAgICAgICBiYWNrZW5kU2VjcmV0UmVzb2x2ZXJcbiAgICAgICksXG4gICAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IHRoaXMuZ2V0SW5zdGFuY2VQcm9wcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gICAgfTtcblxuICAgIGNvbnN0IGF1dGhDb25zdHJ1Y3QgPSBuZXcgQW1wbGlmeUF1dGgoc2NvcGUsIHRoaXMuZGVmYXVsdE5hbWUsIGF1dGhQcm9wcyk7XG4gICAgT2JqZWN0LmVudHJpZXModGhpcy5wcm9wcy50cmlnZ2VycyB8fCB7fSkuZm9yRWFjaChcbiAgICAgIChbdHJpZ2dlckV2ZW50LCBoYW5kbGVyRmFjdG9yeV0pID0+IHtcbiAgICAgICAgYXV0aENvbnN0cnVjdC5hZGRUcmlnZ2VyKFxuICAgICAgICAgIHRyaWdnZXJFdmVudCBhcyBUcmlnZ2VyRXZlbnQsIC8vIHRoaXMgdHlwZSBhc3NlcnRpb24gaXMgbmVjZXNzYXJ5IGJlZm9yZSAuZm9yRWFjaCB0eXBlcyBrZXlzIGFzIGp1c3QgXCJzdHJpbmdcIlxuICAgICAgICAgIGhhbmRsZXJGYWN0b3J5LmdldEluc3RhbmNlKHRoaXMuZ2V0SW5zdGFuY2VQcm9wcylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBhdXRoQ29uc3RydWN0O1xuICB9O1xufVxuXG4vKipcbiAqIFByb3ZpZGUgdGhlIHNldHRpbmdzIHRoYXQgd2lsbCBiZSB1c2VkIGZvciBhdXRoZW50aWNhdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmluZUF1dGggPSAoXG4gIHByb3BzOiBBbXBsaWZ5QXV0aFByb3BzXG4pOiBDb25zdHJ1Y3RGYWN0b3J5PEFtcGxpZnlBdXRoPiA9PlxuICBuZXcgQW1wbGlmeUF1dGhGYWN0b3J5KHByb3BzLCBuZXcgRXJyb3IoKS5zdGFjayk7XG4iXX0=