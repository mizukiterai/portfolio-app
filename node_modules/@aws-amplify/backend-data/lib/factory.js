import { AmplifyData } from '@aws-amplify/data-construct';
import * as path from 'path';
import { convertSchemaToCDK } from './convert_schema.js';
import { buildConstructFactoryFunctionInstanceProvider, convertFunctionNameMapToCDK, } from './convert_functions.js';
import { buildConstructFactoryProvidedAuthConfig, convertAuthorizationModesToCDK, isUsingDefaultApiKeyAuth, } from './convert_authorization_modes.js';
import { validateAuthorizationModes } from './validate_authorization_modes.js';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Singleton factory for AmplifyGraphqlApi constructs that can be used in Amplify project files
 */
class DataFactory {
    props;
    importStack;
    generator;
    /**
     * Create a new AmplifyConstruct
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Gets an instance of the Data construct
     */
    getInstance = (props) => {
        const { constructContainer, outputStorageStrategy, importPathVerifier } = props;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'data', 'resource'), 'Amplify Data must be defined in amplify/data/resource.ts');
        if (!this.generator) {
            this.generator = new DataGenerator(this.props, buildConstructFactoryProvidedAuthConfig(props.constructContainer
                .getConstructFactory('AuthResources')
                ?.getInstance(props)), buildConstructFactoryFunctionInstanceProvider(props), outputStorageStrategy);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class DataGenerator {
    props;
    providedAuthConfig;
    functionInstanceProvider;
    outputStorageStrategy;
    resourceGroupName = 'data';
    defaultName = 'amplifyData';
    constructor(props, providedAuthConfig, functionInstanceProvider, outputStorageStrategy) {
        this.props = props;
        this.providedAuthConfig = providedAuthConfig;
        this.functionInstanceProvider = functionInstanceProvider;
        this.outputStorageStrategy = outputStorageStrategy;
    }
    generateContainerEntry = (scope) => {
        let authorizationModes;
        try {
            authorizationModes = convertAuthorizationModesToCDK(this.functionInstanceProvider, this.providedAuthConfig, this.props.authorizationModes);
        }
        catch (error) {
            throw new AmplifyUserError('InvalidSchemaAuthError', {
                message: error instanceof Error
                    ? error.message
                    : 'Cannot covert authorization modes',
            }, error instanceof Error ? error : undefined);
        }
        try {
            validateAuthorizationModes(this.props.authorizationModes, authorizationModes);
        }
        catch (error) {
            throw new AmplifyUserError('InvalidSchemaAuthError', {
                message: error instanceof Error
                    ? error.message
                    : 'Failed to validate authorization modes',
            }, error instanceof Error ? error : undefined);
        }
        const sandboxModeEnabled = isUsingDefaultApiKeyAuth(this.providedAuthConfig, this.props.authorizationModes);
        const functionNameMap = convertFunctionNameMapToCDK(this.functionInstanceProvider, this.props.functions ?? {});
        let amplifyGraphqlDefinition;
        try {
            amplifyGraphqlDefinition = convertSchemaToCDK(this.props.schema);
        }
        catch (error) {
            throw new AmplifyUserError('InvalidSchemaError', {
                message: error instanceof Error
                    ? error.message
                    : 'Cannot covert user schema',
            }, error instanceof Error ? error : undefined);
        }
        return new AmplifyData(scope, this.defaultName, {
            apiName: this.props.name,
            definition: amplifyGraphqlDefinition,
            authorizationModes,
            outputStorageStrategy: this.outputStorageStrategy,
            functionNameMap,
            translationBehavior: { sandboxModeEnabled },
        });
    };
}
/**
 * Creates a factory that implements ConstructFactory<AmplifyGraphqlApi>
 */
export const defineData = (props) => new DataFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,