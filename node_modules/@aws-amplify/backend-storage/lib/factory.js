import * as path from 'path';
import { AmplifyStorage, } from './construct.js';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Singleton factory for a Storage bucket that can be used in `resource.ts` files
 */
class AmplifyStorageFactory {
    props;
    importStack;
    generator;
    /**
     * Set the properties that will be used to initialize the bucket
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Get a singleton instance of the Bucket
     */
    getInstance = ({ constructContainer, outputStorageStrategy, importPathVerifier, }) => {
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'storage', 'resource'), 'Amplify Storage must be defined in amplify/storage/resource.ts');
        this.validateName(this.props.name);
        if (!this.generator) {
            this.generator = new AmplifyStorageGenerator(this.props, outputStorageStrategy);
        }
        return constructContainer.getOrCompute(this.generator);
    };
    validateName = (name) => {
        const nameIsAlphanumeric = /^[a-zA-Z0-9]+$/.test(name);
        if (!nameIsAlphanumeric) {
            throw new AmplifyUserError('InvalidResourceNameError', {
                message: `defineStorage name can only contain alphanumeric characters, found ${name}`,
                resolution: 'Change the name parameter of defineStorage to only use alphanumeric characters',
            });
        }
    };
}
class AmplifyStorageGenerator {
    props;
    outputStorageStrategy;
    resourceGroupName = 'storage';
    constructor(props, outputStorageStrategy) {
        this.props = props;
        this.outputStorageStrategy = outputStorageStrategy;
    }
    generateContainerEntry = (scope) => {
        return new AmplifyStorage(scope, `${this.props.name}`, {
            ...this.props,
            outputStorageStrategy: this.outputStorageStrategy,
        });
    };
}
/**
 * Creates a factory that implements ConstructFactory<AmplifyStorage>
 */
export const defineStorage = (props) => new AmplifyStorageFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFDTCxjQUFjLEdBR2YsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQU85RDs7R0FFRztBQUNILE1BQU0scUJBQXFCO0lBU047SUFDQTtJQVBYLFNBQVMsQ0FBbUM7SUFFcEQ7O09BRUc7SUFDSCxZQUNtQixLQUFpQyxFQUNqQyxjQUFjLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSztRQUQvQixVQUFLLEdBQUwsS0FBSyxDQUE0QjtRQUNqQyxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7SUFDL0MsQ0FBQztJQUVKOztPQUVHO0lBQ0gsV0FBVyxHQUFHLENBQUMsRUFDYixrQkFBa0IsRUFDbEIscUJBQXFCLEVBQ3JCLGtCQUFrQixHQUNlLEVBQWtCLEVBQUU7UUFDckQsa0JBQWtCLEVBQUUsTUFBTSxDQUN4QixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLEVBQzNDLGdFQUFnRSxDQUNqRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx1QkFBdUIsQ0FDMUMsSUFBSSxDQUFDLEtBQUssRUFDVixxQkFBcUIsQ0FDdEIsQ0FBQztTQUNIO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBbUIsQ0FBQztJQUMzRSxDQUFDLENBQUM7SUFFTSxZQUFZLEdBQUcsQ0FBQyxJQUFZLEVBQVEsRUFBRTtRQUM1QyxNQUFNLGtCQUFrQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDdkIsTUFBTSxJQUFJLGdCQUFnQixDQUFDLDBCQUEwQixFQUFFO2dCQUNyRCxPQUFPLEVBQUUsc0VBQXNFLElBQUksRUFBRTtnQkFDckYsVUFBVSxFQUNSLGdGQUFnRjthQUNuRixDQUFDLENBQUM7U0FDSjtJQUNILENBQUMsQ0FBQztDQUNIO0FBRUQsTUFBTSx1QkFBdUI7SUFJUjtJQUNBO0lBSlYsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBRXZDLFlBQ21CLEtBQTBCLEVBQzFCLHFCQUF1RTtRQUR2RSxVQUFLLEdBQUwsS0FBSyxDQUFxQjtRQUMxQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQWtEO0lBQ3ZGLENBQUM7SUFFSixzQkFBc0IsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtRQUM1QyxPQUFPLElBQUksY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckQsR0FBRyxJQUFJLENBQUMsS0FBSztZQUNiLHFCQUFxQixFQUFFLElBQUksQ0FBQyxxQkFBcUI7U0FDbEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0NBQ0g7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUMzQixLQUEwQixFQUM0QixFQUFFLENBQ3hELElBQUkscUJBQXFCLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRFbnRyeSxcbiAgQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gIENvbnN0cnVjdEZhY3RvcnksXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBSZXNvdXJjZVByb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge1xuICBBbXBsaWZ5U3RvcmFnZSxcbiAgQW1wbGlmeVN0b3JhZ2VQcm9wcyxcbiAgU3RvcmFnZVJlc291cmNlcyxcbn0gZnJvbSAnLi9jb25zdHJ1Y3QuanMnO1xuaW1wb3J0IHsgQW1wbGlmeVVzZXJFcnJvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuZXhwb3J0IHR5cGUgQW1wbGlmeVN0b3JhZ2VGYWN0b3J5UHJvcHMgPSBPbWl0PFxuICBBbXBsaWZ5U3RvcmFnZVByb3BzLFxuICAnb3V0cHV0U3RvcmFnZVN0cmF0ZWd5J1xuPjtcblxuLyoqXG4gKiBTaW5nbGV0b24gZmFjdG9yeSBmb3IgYSBTdG9yYWdlIGJ1Y2tldCB0aGF0IGNhbiBiZSB1c2VkIGluIGByZXNvdXJjZS50c2AgZmlsZXNcbiAqL1xuY2xhc3MgQW1wbGlmeVN0b3JhZ2VGYWN0b3J5XG4gIGltcGxlbWVudHMgQ29uc3RydWN0RmFjdG9yeTxSZXNvdXJjZVByb3ZpZGVyPFN0b3JhZ2VSZXNvdXJjZXM+Plxue1xuICBwcml2YXRlIGdlbmVyYXRvcjogQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3I7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplIHRoZSBidWNrZXRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEFtcGxpZnlTdG9yYWdlRmFjdG9yeVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW1wb3J0U3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFja1xuICApIHt9XG5cbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgQnVja2V0XG4gICAqL1xuICBnZXRJbnN0YW5jZSA9ICh7XG4gICAgY29uc3RydWN0Q29udGFpbmVyLFxuICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgICBpbXBvcnRQYXRoVmVyaWZpZXIsXG4gIH06IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzKTogQW1wbGlmeVN0b3JhZ2UgPT4ge1xuICAgIGltcG9ydFBhdGhWZXJpZmllcj8udmVyaWZ5KFxuICAgICAgdGhpcy5pbXBvcnRTdGFjayxcbiAgICAgIHBhdGguam9pbignYW1wbGlmeScsICdzdG9yYWdlJywgJ3Jlc291cmNlJyksXG4gICAgICAnQW1wbGlmeSBTdG9yYWdlIG11c3QgYmUgZGVmaW5lZCBpbiBhbXBsaWZ5L3N0b3JhZ2UvcmVzb3VyY2UudHMnXG4gICAgKTtcbiAgICB0aGlzLnZhbGlkYXRlTmFtZSh0aGlzLnByb3BzLm5hbWUpO1xuICAgIGlmICghdGhpcy5nZW5lcmF0b3IpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdG9yID0gbmV3IEFtcGxpZnlTdG9yYWdlR2VuZXJhdG9yKFxuICAgICAgICB0aGlzLnByb3BzLFxuICAgICAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3lcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb25zdHJ1Y3RDb250YWluZXIuZ2V0T3JDb21wdXRlKHRoaXMuZ2VuZXJhdG9yKSBhcyBBbXBsaWZ5U3RvcmFnZTtcbiAgfTtcblxuICBwcml2YXRlIHZhbGlkYXRlTmFtZSA9IChuYW1lOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICBjb25zdCBuYW1lSXNBbHBoYW51bWVyaWMgPSAvXlthLXpBLVowLTldKyQvLnRlc3QobmFtZSk7XG4gICAgaWYgKCFuYW1lSXNBbHBoYW51bWVyaWMpIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdJbnZhbGlkUmVzb3VyY2VOYW1lRXJyb3InLCB7XG4gICAgICAgIG1lc3NhZ2U6IGBkZWZpbmVTdG9yYWdlIG5hbWUgY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycywgZm91bmQgJHtuYW1lfWAsXG4gICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgJ0NoYW5nZSB0aGUgbmFtZSBwYXJhbWV0ZXIgb2YgZGVmaW5lU3RvcmFnZSB0byBvbmx5IHVzZSBhbHBoYW51bWVyaWMgY2hhcmFjdGVycycsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmNsYXNzIEFtcGxpZnlTdG9yYWdlR2VuZXJhdG9yIGltcGxlbWVudHMgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3Ige1xuICByZWFkb25seSByZXNvdXJjZUdyb3VwTmFtZSA9ICdzdG9yYWdlJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBBbXBsaWZ5U3RvcmFnZVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5OiBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PEJhY2tlbmRPdXRwdXRFbnRyeT5cbiAgKSB7fVxuXG4gIGdlbmVyYXRlQ29udGFpbmVyRW50cnkgPSAoc2NvcGU6IENvbnN0cnVjdCkgPT4ge1xuICAgIHJldHVybiBuZXcgQW1wbGlmeVN0b3JhZ2Uoc2NvcGUsIGAke3RoaXMucHJvcHMubmFtZX1gLCB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5OiB0aGlzLm91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgICB9KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZmFjdG9yeSB0aGF0IGltcGxlbWVudHMgQ29uc3RydWN0RmFjdG9yeTxBbXBsaWZ5U3RvcmFnZT5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmluZVN0b3JhZ2UgPSAoXG4gIHByb3BzOiBBbXBsaWZ5U3RvcmFnZVByb3BzXG4pOiBDb25zdHJ1Y3RGYWN0b3J5PFJlc291cmNlUHJvdmlkZXI8U3RvcmFnZVJlc291cmNlcz4+ID0+XG4gIG5ldyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnkocHJvcHMsIG5ldyBFcnJvcigpLnN0YWNrKTtcbiJdfQ==