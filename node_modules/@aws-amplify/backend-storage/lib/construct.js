import { Construct } from 'constructs';
import { Bucket } from 'aws-cdk-lib/aws-s3';
import { storageOutputKey, } from '@aws-amplify/backend-output-schemas';
import { Stack } from 'aws-cdk-lib';
import { AttributionMetadataStorage, StackMetadataBackendOutputStorageStrategy, } from '@aws-amplify/backend-output-storage';
import { fileURLToPath } from 'url';
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Storage in BI metrics
const storageStackType = 'storage-S3';
/**
 * Amplify Storage CDK Construct
 *
 * Currently just a thin wrapper around an S3 bucket
 */
export class AmplifyStorage extends Construct {
    resources;
    /**
     * Create a new AmplifyStorage instance
     */
    constructor(scope, id, props) {
        super(scope, id);
        const bucketProps = {
            versioned: props.versioned || false,
        };
        this.resources = {
            bucket: new Bucket(this, 'Bucket', bucketProps),
        };
        this.storeOutput(props.outputStorageStrategy);
        new AttributionMetadataStorage().storeAttributionMetadata(Stack.of(this), storageStackType, fileURLToPath(new URL('../package.json', import.meta.url)));
    }
    /**
     * Store storage outputs using provided strategy
     */
    storeOutput = (outputStorageStrategy = new StackMetadataBackendOutputStorageStrategy(Stack.of(this))) => {
        outputStorageStrategy.addBackendOutputEntry(storageOutputKey, {
            version: '1',
            payload: {
                storageRegion: Stack.of(this).region,
                bucketName: this.resources.bucket.bucketName,
            },
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxNQUFNLEVBQXdCLE1BQU0sb0JBQW9CLENBQUM7QUFLbEUsT0FBTyxFQUVMLGdCQUFnQixHQUNqQixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUNMLDBCQUEwQixFQUMxQix5Q0FBeUMsR0FDMUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRXBDLHlIQUF5SDtBQUN6SCxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQztBQVl0Qzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGNBQ1gsU0FBUSxTQUFTO0lBR1IsU0FBUyxDQUFtQjtJQUNyQzs7T0FFRztJQUNILFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBMEI7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFdBQVcsR0FBZ0I7WUFDL0IsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLElBQUksS0FBSztTQUNwQyxDQUFDO1FBRUYsSUFBSSxDQUFDLFNBQVMsR0FBRztZQUNmLE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQztTQUNoRCxDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUU5QyxJQUFJLDBCQUEwQixFQUFFLENBQUMsd0JBQXdCLENBQ3ZELEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ2QsZ0JBQWdCLEVBQ2hCLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNELENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSyxXQUFXLEdBQUcsQ0FDcEIsd0JBQXFFLElBQUkseUNBQXlDLENBQ2hILEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQ2YsRUFDSyxFQUFFO1FBQ1IscUJBQXFCLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLEVBQUU7WUFDNUQsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUU7Z0JBQ1AsYUFBYSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTtnQkFDcEMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7YUFDN0M7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQnVja2V0LCBCdWNrZXRQcm9wcywgSUJ1Y2tldCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQge1xuICBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxuICBSZXNvdXJjZVByb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7XG4gIFN0b3JhZ2VPdXRwdXQsXG4gIHN0b3JhZ2VPdXRwdXRLZXksXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHtcbiAgQXR0cmlidXRpb25NZXRhZGF0YVN0b3JhZ2UsXG4gIFN0YWNrTWV0YWRhdGFCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc3RvcmFnZSc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcblxuLy8gQmUgdmVyeSBjYXJlZnVsIGVkaXRpbmcgdGhpcyB2YWx1ZS4gSXQgaXMgdGhlIHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gYXR0cmlidXRlIHN0YWNrcyB0byBBbXBsaWZ5IFN0b3JhZ2UgaW4gQkkgbWV0cmljc1xuY29uc3Qgc3RvcmFnZVN0YWNrVHlwZSA9ICdzdG9yYWdlLVMzJztcblxuZXhwb3J0IHR5cGUgQW1wbGlmeVN0b3JhZ2VQcm9wcyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICB2ZXJzaW9uZWQ/OiBib29sZWFuO1xuICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k/OiBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PFN0b3JhZ2VPdXRwdXQ+O1xufTtcblxuZXhwb3J0IHR5cGUgU3RvcmFnZVJlc291cmNlcyA9IHtcbiAgYnVja2V0OiBJQnVja2V0O1xufTtcblxuLyoqXG4gKiBBbXBsaWZ5IFN0b3JhZ2UgQ0RLIENvbnN0cnVjdFxuICpcbiAqIEN1cnJlbnRseSBqdXN0IGEgdGhpbiB3cmFwcGVyIGFyb3VuZCBhbiBTMyBidWNrZXRcbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlTdG9yYWdlXG4gIGV4dGVuZHMgQ29uc3RydWN0XG4gIGltcGxlbWVudHMgUmVzb3VyY2VQcm92aWRlcjxTdG9yYWdlUmVzb3VyY2VzPlxue1xuICByZWFkb25seSByZXNvdXJjZXM6IFN0b3JhZ2VSZXNvdXJjZXM7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgQW1wbGlmeVN0b3JhZ2UgaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBbXBsaWZ5U3RvcmFnZVByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGJ1Y2tldFByb3BzOiBCdWNrZXRQcm9wcyA9IHtcbiAgICAgIHZlcnNpb25lZDogcHJvcHMudmVyc2lvbmVkIHx8IGZhbHNlLFxuICAgIH07XG5cbiAgICB0aGlzLnJlc291cmNlcyA9IHtcbiAgICAgIGJ1Y2tldDogbmV3IEJ1Y2tldCh0aGlzLCAnQnVja2V0JywgYnVja2V0UHJvcHMpLFxuICAgIH07XG5cbiAgICB0aGlzLnN0b3JlT3V0cHV0KHByb3BzLm91dHB1dFN0b3JhZ2VTdHJhdGVneSk7XG5cbiAgICBuZXcgQXR0cmlidXRpb25NZXRhZGF0YVN0b3JhZ2UoKS5zdG9yZUF0dHJpYnV0aW9uTWV0YWRhdGEoXG4gICAgICBTdGFjay5vZih0aGlzKSxcbiAgICAgIHN0b3JhZ2VTdGFja1R5cGUsXG4gICAgICBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybCkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZSBzdG9yYWdlIG91dHB1dHMgdXNpbmcgcHJvdmlkZWQgc3RyYXRlZ3lcbiAgICovXG4gIHByaXZhdGUgc3RvcmVPdXRwdXQgPSAoXG4gICAgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5OiBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PFN0b3JhZ2VPdXRwdXQ+ID0gbmV3IFN0YWNrTWV0YWRhdGFCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5KFxuICAgICAgU3RhY2sub2YodGhpcylcbiAgICApXG4gICk6IHZvaWQgPT4ge1xuICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneS5hZGRCYWNrZW5kT3V0cHV0RW50cnkoc3RvcmFnZU91dHB1dEtleSwge1xuICAgICAgdmVyc2lvbjogJzEnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBzdG9yYWdlUmVnaW9uOiBTdGFjay5vZih0aGlzKS5yZWdpb24sXG4gICAgICAgIGJ1Y2tldE5hbWU6IHRoaXMucmVzb3VyY2VzLmJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==