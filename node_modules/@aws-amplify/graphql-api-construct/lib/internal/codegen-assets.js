"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodegenAssets = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment");
const constructs_1 = require("constructs");
const MODEL_SCHEMA_KEY = 'model-schema.graphql';
/**
 * Construct an S3 URI string for a given bucket and key.
 * @param bucket the bucket to embed in the uri string
 * @param key the key to embed in the uri string
 * @returns the uri string representation.
 */
const getS3UriForBucketAndKey = (bucket, key) => `s3://${bucket.bucketName}/${key}`;
/**
 * Construct which creates a bucket, and uploads file assets required for codegen to run.
 * Pointers to these resources are persisted in the stack outputs.
 */
class CodegenAssets extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const bucket = new aws_s3_1.Bucket(this, `${id}Bucket`, {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
        });
        const deployment = new aws_s3_deployment_1.BucketDeployment(this, `${id}Deployment`, {
            destinationBucket: bucket,
            sources: [aws_s3_deployment_1.Source.data(MODEL_SCHEMA_KEY, props.modelSchema)],
            // Bucket deployment uses a Lambda that runs AWS S3 CLI to transfer assets to destination bucket.
            // That Lambda requires higher memory setting to run fast even when processing small assets (less than 1kB).
            // This setting has been established experimentally. Benchmark can be found in pull request description that established it.
            // The value has been chosen to prefer the lowest cost (run time * memory demand) while providing reasonable performance.
            memoryLimit: 1536,
        });
        this.modelSchemaS3Uri = getS3UriForBucketAndKey(deployment.deployedBucket, MODEL_SCHEMA_KEY);
    }
}
exports.CodegenAssets = CodegenAssets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWdlbi1hc3NldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJuYWwvY29kZWdlbi1hc3NldHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTRDO0FBQzVDLCtDQUFxRDtBQUNyRCxxRUFBeUU7QUFDekUsMkNBQXVDO0FBTXZDLE1BQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUM7QUFFaEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLHVCQUF1QixHQUFHLENBQUMsTUFBZSxFQUFFLEdBQVcsRUFBVSxFQUFFLENBQUMsUUFBUSxNQUFNLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBRTdHOzs7R0FHRztBQUNILE1BQWEsYUFBYyxTQUFRLHNCQUFTO0lBRzFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDakUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtZQUM3QyxhQUFhLEVBQUUsMkJBQWEsQ0FBQyxPQUFPO1lBQ3BDLGlCQUFpQixFQUFFLElBQUk7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxvQ0FBZ0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRTtZQUMvRCxpQkFBaUIsRUFBRSxNQUFNO1lBQ3pCLE9BQU8sRUFBRSxDQUFDLDBCQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzRCxpR0FBaUc7WUFDakcsNEdBQTRHO1lBQzVHLDRIQUE0SDtZQUM1SCx5SEFBeUg7WUFDekgsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUMvRixDQUFDO0NBQ0Y7QUF2QkQsc0NBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVtb3ZhbFBvbGljeSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEJ1Y2tldCwgSUJ1Y2tldCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQgeyBCdWNrZXREZXBsb3ltZW50LCBTb3VyY2UgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMtZGVwbG95bWVudCc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IHR5cGUgQ29kZWdlbkFzc2V0c1Byb3BzID0ge1xuICBtb2RlbFNjaGVtYTogc3RyaW5nO1xufTtcblxuY29uc3QgTU9ERUxfU0NIRU1BX0tFWSA9ICdtb2RlbC1zY2hlbWEuZ3JhcGhxbCc7XG5cbi8qKlxuICogQ29uc3RydWN0IGFuIFMzIFVSSSBzdHJpbmcgZm9yIGEgZ2l2ZW4gYnVja2V0IGFuZCBrZXkuXG4gKiBAcGFyYW0gYnVja2V0IHRoZSBidWNrZXQgdG8gZW1iZWQgaW4gdGhlIHVyaSBzdHJpbmdcbiAqIEBwYXJhbSBrZXkgdGhlIGtleSB0byBlbWJlZCBpbiB0aGUgdXJpIHN0cmluZ1xuICogQHJldHVybnMgdGhlIHVyaSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKi9cbmNvbnN0IGdldFMzVXJpRm9yQnVja2V0QW5kS2V5ID0gKGJ1Y2tldDogSUJ1Y2tldCwga2V5OiBzdHJpbmcpOiBzdHJpbmcgPT4gYHMzOi8vJHtidWNrZXQuYnVja2V0TmFtZX0vJHtrZXl9YDtcblxuLyoqXG4gKiBDb25zdHJ1Y3Qgd2hpY2ggY3JlYXRlcyBhIGJ1Y2tldCwgYW5kIHVwbG9hZHMgZmlsZSBhc3NldHMgcmVxdWlyZWQgZm9yIGNvZGVnZW4gdG8gcnVuLlxuICogUG9pbnRlcnMgdG8gdGhlc2UgcmVzb3VyY2VzIGFyZSBwZXJzaXN0ZWQgaW4gdGhlIHN0YWNrIG91dHB1dHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb2RlZ2VuQXNzZXRzIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgcHVibGljIG1vZGVsU2NoZW1hUzNVcmk6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ29kZWdlbkFzc2V0c1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBCdWNrZXQodGhpcywgYCR7aWR9QnVja2V0YCwge1xuICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gICAgfSk7XG5cbiAgICBjb25zdCBkZXBsb3ltZW50ID0gbmV3IEJ1Y2tldERlcGxveW1lbnQodGhpcywgYCR7aWR9RGVwbG95bWVudGAsIHtcbiAgICAgIGRlc3RpbmF0aW9uQnVja2V0OiBidWNrZXQsXG4gICAgICBzb3VyY2VzOiBbU291cmNlLmRhdGEoTU9ERUxfU0NIRU1BX0tFWSwgcHJvcHMubW9kZWxTY2hlbWEpXSxcbiAgICAgIC8vIEJ1Y2tldCBkZXBsb3ltZW50IHVzZXMgYSBMYW1iZGEgdGhhdCBydW5zIEFXUyBTMyBDTEkgdG8gdHJhbnNmZXIgYXNzZXRzIHRvIGRlc3RpbmF0aW9uIGJ1Y2tldC5cbiAgICAgIC8vIFRoYXQgTGFtYmRhIHJlcXVpcmVzIGhpZ2hlciBtZW1vcnkgc2V0dGluZyB0byBydW4gZmFzdCBldmVuIHdoZW4gcHJvY2Vzc2luZyBzbWFsbCBhc3NldHMgKGxlc3MgdGhhbiAxa0IpLlxuICAgICAgLy8gVGhpcyBzZXR0aW5nIGhhcyBiZWVuIGVzdGFibGlzaGVkIGV4cGVyaW1lbnRhbGx5LiBCZW5jaG1hcmsgY2FuIGJlIGZvdW5kIGluIHB1bGwgcmVxdWVzdCBkZXNjcmlwdGlvbiB0aGF0IGVzdGFibGlzaGVkIGl0LlxuICAgICAgLy8gVGhlIHZhbHVlIGhhcyBiZWVuIGNob3NlbiB0byBwcmVmZXIgdGhlIGxvd2VzdCBjb3N0IChydW4gdGltZSAqIG1lbW9yeSBkZW1hbmQpIHdoaWxlIHByb3ZpZGluZyByZWFzb25hYmxlIHBlcmZvcm1hbmNlLlxuICAgICAgbWVtb3J5TGltaXQ6IDE1MzYsXG4gICAgfSk7XG5cbiAgICB0aGlzLm1vZGVsU2NoZW1hUzNVcmkgPSBnZXRTM1VyaUZvckJ1Y2tldEFuZEtleShkZXBsb3ltZW50LmRlcGxveWVkQnVja2V0LCBNT0RFTF9TQ0hFTUFfS0VZKTtcbiAgfVxufVxuIl19