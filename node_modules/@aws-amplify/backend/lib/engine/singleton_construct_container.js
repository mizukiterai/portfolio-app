import { getBackendIdentifier } from '../backend_identifier.js';
import { DefaultBackendSecretResolver } from './backend-secret/backend_secret_resolver.js';
/**
 * Serves as a DI container and shared state store for initializing Amplify constructs
 */
export class SingletonConstructContainer {
    stackResolver;
    // uses the CacheEntryGenerator as the map key. The value is what the generator returned the first time it was seen
    providerCache = new Map();
    providerFactoryTokenMap = {};
    /**
     * Initialize the BackendBuildState with a root stack
     */
    constructor(stackResolver) {
        this.stackResolver = stackResolver;
    }
    /**
     * If generator has been seen before, the cached Construct instance is returned
     * Otherwise, the generator is called and the value is cached and returned
     */
    getOrCompute = (generator) => {
        if (!this.providerCache.has(generator)) {
            const scope = this.stackResolver.getStackFor(generator.resourceGroupName);
            const backendId = getBackendIdentifier(scope);
            const backendSecretResolver = new DefaultBackendSecretResolver(scope, backendId);
            this.providerCache.set(generator, generator.generateContainerEntry(scope, backendSecretResolver));
        }
        // safe because we set if it doesn't exist above
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.providerCache.get(generator);
    };
    /**
     * Gets a ConstructFactory that has previously been registered to a given token.
     * Returns undefined if no construct factory is found for the specified token.
     *
     * NOTE: The return type of this function cannot be guaranteed at compile time because factories are dynamically registered at runtime
     * The return type of the factory is a contract that must be negotiated by the entity that registers a token and the entity that retrieves a token.
     *
     * By convention, tokens should be the name of type T
     */
    getConstructFactory = (token) => {
        if (token in this.providerFactoryTokenMap) {
            return this.providerFactoryTokenMap[token];
        }
        return;
    };
    /**
     * Register a ConstructFactory to a specified token. This ConstructFactory can be retrieved later using getConstructFactory
     * Throws if the token is already registered to a different factory
     */
    registerConstructFactory = (token, provider) => {
        if (token in this.providerFactoryTokenMap &&
            this.providerFactoryTokenMap[token] !== provider) {
            throw new Error(`Token ${token} is already registered to a ProviderFactory`);
        }
        this.providerFactoryTokenMap[token] = provider;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xldG9uX2NvbnN0cnVjdF9jb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5naW5lL3NpbmdsZXRvbl9jb25zdHJ1Y3RfY29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRTNGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQWFUO0lBWjdCLG1IQUFtSDtJQUNsRyxhQUFhLEdBRzFCLElBQUksR0FBRyxFQUFFLENBQUM7SUFFRyx1QkFBdUIsR0FDdEMsRUFBRSxDQUFDO0lBRUw7O09BRUc7SUFDSCxZQUE2QixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7SUFFN0Q7OztPQUdHO0lBQ0gsWUFBWSxHQUFHLENBQ2IsU0FBMkMsRUFDekIsRUFBRTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLDRCQUE0QixDQUM1RCxLQUFLLEVBQ0wsU0FBUyxDQUNWLENBQUM7WUFDRixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDcEIsU0FBUyxFQUNULFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLENBQUMsQ0FDL0QsQ0FBQztTQUNIO1FBQ0QsZ0RBQWdEO1FBQ2hELG9FQUFvRTtRQUNwRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRSxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGOzs7Ozs7OztPQVFHO0lBQ0gsbUJBQW1CLEdBQUcsQ0FDcEIsS0FBYSxFQUNvQixFQUFFO1FBQ25DLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUN6QyxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQXdCLENBQUM7U0FDbkU7UUFDRCxPQUFPO0lBQ1QsQ0FBQyxDQUFDO0lBRUY7OztPQUdHO0lBQ0gsd0JBQXdCLEdBQUcsQ0FDekIsS0FBYSxFQUNiLFFBQTBCLEVBQ3BCLEVBQUU7UUFDUixJQUNFLEtBQUssSUFBSSxJQUFJLENBQUMsdUJBQXVCO1lBQ3JDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLEVBQ2hEO1lBQ0EsTUFBTSxJQUFJLEtBQUssQ0FDYixTQUFTLEtBQUssNkNBQTZDLENBQzVELENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDakQsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFja1Jlc29sdmVyIH0gZnJvbSAnLi9uZXN0ZWRfc3RhY2tfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHtcbiAgQ29uc3RydWN0Q29udGFpbmVyLFxuICBDb25zdHJ1Y3RDb250YWluZXJFbnRyeUdlbmVyYXRvcixcbiAgQ29uc3RydWN0RmFjdG9yeSxcbiAgUmVzb3VyY2VQcm92aWRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBnZXRCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJy4uL2JhY2tlbmRfaWRlbnRpZmllci5qcyc7XG5pbXBvcnQgeyBEZWZhdWx0QmFja2VuZFNlY3JldFJlc29sdmVyIH0gZnJvbSAnLi9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9yZXNvbHZlci5qcyc7XG5cbi8qKlxuICogU2VydmVzIGFzIGEgREkgY29udGFpbmVyIGFuZCBzaGFyZWQgc3RhdGUgc3RvcmUgZm9yIGluaXRpYWxpemluZyBBbXBsaWZ5IGNvbnN0cnVjdHNcbiAqL1xuZXhwb3J0IGNsYXNzIFNpbmdsZXRvbkNvbnN0cnVjdENvbnRhaW5lciBpbXBsZW1lbnRzIENvbnN0cnVjdENvbnRhaW5lciB7XG4gIC8vIHVzZXMgdGhlIENhY2hlRW50cnlHZW5lcmF0b3IgYXMgdGhlIG1hcCBrZXkuIFRoZSB2YWx1ZSBpcyB3aGF0IHRoZSBnZW5lcmF0b3IgcmV0dXJuZWQgdGhlIGZpcnN0IHRpbWUgaXQgd2FzIHNlZW5cbiAgcHJpdmF0ZSByZWFkb25seSBwcm92aWRlckNhY2hlOiBNYXA8XG4gICAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gICAgUmVzb3VyY2VQcm92aWRlclxuICA+ID0gbmV3IE1hcCgpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcHJvdmlkZXJGYWN0b3J5VG9rZW5NYXA6IFJlY29yZDxzdHJpbmcsIENvbnN0cnVjdEZhY3Rvcnk+ID1cbiAgICB7fTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgQmFja2VuZEJ1aWxkU3RhdGUgd2l0aCBhIHJvb3Qgc3RhY2tcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc3RhY2tSZXNvbHZlcjogU3RhY2tSZXNvbHZlcikge31cblxuICAvKipcbiAgICogSWYgZ2VuZXJhdG9yIGhhcyBiZWVuIHNlZW4gYmVmb3JlLCB0aGUgY2FjaGVkIENvbnN0cnVjdCBpbnN0YW5jZSBpcyByZXR1cm5lZFxuICAgKiBPdGhlcndpc2UsIHRoZSBnZW5lcmF0b3IgaXMgY2FsbGVkIGFuZCB0aGUgdmFsdWUgaXMgY2FjaGVkIGFuZCByZXR1cm5lZFxuICAgKi9cbiAgZ2V0T3JDb21wdXRlID0gKFxuICAgIGdlbmVyYXRvcjogQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3JcbiAgKTogUmVzb3VyY2VQcm92aWRlciA9PiB7XG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyQ2FjaGUuaGFzKGdlbmVyYXRvcikpIHtcbiAgICAgIGNvbnN0IHNjb3BlID0gdGhpcy5zdGFja1Jlc29sdmVyLmdldFN0YWNrRm9yKGdlbmVyYXRvci5yZXNvdXJjZUdyb3VwTmFtZSk7XG4gICAgICBjb25zdCBiYWNrZW5kSWQgPSBnZXRCYWNrZW5kSWRlbnRpZmllcihzY29wZSk7XG4gICAgICBjb25zdCBiYWNrZW5kU2VjcmV0UmVzb2x2ZXIgPSBuZXcgRGVmYXVsdEJhY2tlbmRTZWNyZXRSZXNvbHZlcihcbiAgICAgICAgc2NvcGUsXG4gICAgICAgIGJhY2tlbmRJZFxuICAgICAgKTtcbiAgICAgIHRoaXMucHJvdmlkZXJDYWNoZS5zZXQoXG4gICAgICAgIGdlbmVyYXRvcixcbiAgICAgICAgZ2VuZXJhdG9yLmdlbmVyYXRlQ29udGFpbmVyRW50cnkoc2NvcGUsIGJhY2tlbmRTZWNyZXRSZXNvbHZlcilcbiAgICAgICk7XG4gICAgfVxuICAgIC8vIHNhZmUgYmVjYXVzZSB3ZSBzZXQgaWYgaXQgZG9lc24ndCBleGlzdCBhYm92ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXJDYWNoZS5nZXQoZ2VuZXJhdG9yKSE7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgYSBDb25zdHJ1Y3RGYWN0b3J5IHRoYXQgaGFzIHByZXZpb3VzbHkgYmVlbiByZWdpc3RlcmVkIHRvIGEgZ2l2ZW4gdG9rZW4uXG4gICAqIFJldHVybnMgdW5kZWZpbmVkIGlmIG5vIGNvbnN0cnVjdCBmYWN0b3J5IGlzIGZvdW5kIGZvciB0aGUgc3BlY2lmaWVkIHRva2VuLlxuICAgKlxuICAgKiBOT1RFOiBUaGUgcmV0dXJuIHR5cGUgb2YgdGhpcyBmdW5jdGlvbiBjYW5ub3QgYmUgZ3VhcmFudGVlZCBhdCBjb21waWxlIHRpbWUgYmVjYXVzZSBmYWN0b3JpZXMgYXJlIGR5bmFtaWNhbGx5IHJlZ2lzdGVyZWQgYXQgcnVudGltZVxuICAgKiBUaGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZhY3RvcnkgaXMgYSBjb250cmFjdCB0aGF0IG11c3QgYmUgbmVnb3RpYXRlZCBieSB0aGUgZW50aXR5IHRoYXQgcmVnaXN0ZXJzIGEgdG9rZW4gYW5kIHRoZSBlbnRpdHkgdGhhdCByZXRyaWV2ZXMgYSB0b2tlbi5cbiAgICpcbiAgICogQnkgY29udmVudGlvbiwgdG9rZW5zIHNob3VsZCBiZSB0aGUgbmFtZSBvZiB0eXBlIFRcbiAgICovXG4gIGdldENvbnN0cnVjdEZhY3RvcnkgPSA8VCBleHRlbmRzIFJlc291cmNlUHJvdmlkZXI+KFxuICAgIHRva2VuOiBzdHJpbmdcbiAgKTogQ29uc3RydWN0RmFjdG9yeTxUPiB8IHVuZGVmaW5lZCA9PiB7XG4gICAgaWYgKHRva2VuIGluIHRoaXMucHJvdmlkZXJGYWN0b3J5VG9rZW5NYXApIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyRmFjdG9yeVRva2VuTWFwW3Rva2VuXSBhcyBDb25zdHJ1Y3RGYWN0b3J5PFQ+O1xuICAgIH1cbiAgICByZXR1cm47XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgQ29uc3RydWN0RmFjdG9yeSB0byBhIHNwZWNpZmllZCB0b2tlbi4gVGhpcyBDb25zdHJ1Y3RGYWN0b3J5IGNhbiBiZSByZXRyaWV2ZWQgbGF0ZXIgdXNpbmcgZ2V0Q29uc3RydWN0RmFjdG9yeVxuICAgKiBUaHJvd3MgaWYgdGhlIHRva2VuIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCB0byBhIGRpZmZlcmVudCBmYWN0b3J5XG4gICAqL1xuICByZWdpc3RlckNvbnN0cnVjdEZhY3RvcnkgPSAoXG4gICAgdG9rZW46IHN0cmluZyxcbiAgICBwcm92aWRlcjogQ29uc3RydWN0RmFjdG9yeVxuICApOiB2b2lkID0+IHtcbiAgICBpZiAoXG4gICAgICB0b2tlbiBpbiB0aGlzLnByb3ZpZGVyRmFjdG9yeVRva2VuTWFwICYmXG4gICAgICB0aGlzLnByb3ZpZGVyRmFjdG9yeVRva2VuTWFwW3Rva2VuXSAhPT0gcHJvdmlkZXJcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRva2VuICR7dG9rZW59IGlzIGFscmVhZHkgcmVnaXN0ZXJlZCB0byBhIFByb3ZpZGVyRmFjdG9yeWBcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMucHJvdmlkZXJGYWN0b3J5VG9rZW5NYXBbdG9rZW5dID0gcHJvdmlkZXI7XG4gIH07XG59XG4iXX0=