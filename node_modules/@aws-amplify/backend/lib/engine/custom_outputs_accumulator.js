import { customOutputKey, } from '@aws-amplify/backend-output-schemas';
import { Lazy } from 'aws-cdk-lib';
import { AmplifyUserError, ObjectAccumulatorPropertyAlreadyExistsError, } from '@aws-amplify/platform-core';
/**
 * Accumulates custom outputs as they're added to the backend.
 */
export class CustomOutputsAccumulator {
    outputStorageStrategy;
    clientConfigAccumulator;
    hasBackendOutputEntry = false;
    /**
     * Creates custom outputs accumulator.
     */
    constructor(outputStorageStrategy, clientConfigAccumulator) {
        this.outputStorageStrategy = outputStorageStrategy;
        this.clientConfigAccumulator = clientConfigAccumulator;
    }
    addOutput = (clientConfigPart) => {
        try {
            this.clientConfigAccumulator.accumulate(clientConfigPart);
        }
        catch (error) {
            if (error instanceof ObjectAccumulatorPropertyAlreadyExistsError) {
                throw new AmplifyUserError('OutputEntryAlreadyExistsError', {
                    message: `Output entry with key ${error.key} already exists`,
                    resolution: "Check if 'backend.addOutput' is called multiple times with overlapping inputs",
                }, error);
            }
            throw error;
        }
        this.ensureBackendOutputEntry();
    };
    ensureBackendOutputEntry = () => {
        if (this.hasBackendOutputEntry) {
            return;
        }
        this.outputStorageStrategy.addBackendOutputEntry(customOutputKey, {
            version: '1',
            payload: {
                customOutputs: Lazy.string({
                    produce: () => {
                        return JSON.stringify(this.clientConfigAccumulator.getAccumulatedObject());
                    },
                }),
            },
        });
        this.hasBackendOutputEntry = true;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tX291dHB1dHNfYWNjdW11bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5naW5lL2N1c3RvbV9vdXRwdXRzX2FjY3VtdWxhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFFTCxlQUFlLEdBQ2hCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQ0wsZ0JBQWdCLEVBRWhCLDJDQUEyQyxHQUM1QyxNQUFNLDRCQUE0QixDQUFDO0FBRXBDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHdCQUF3QjtJQU9oQjtJQUNBO0lBUFgscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0lBRXRDOztPQUVHO0lBQ0gsWUFDbUIscUJBQWlFLEVBQ2pFLHVCQUF3RDtRQUR4RCwwQkFBcUIsR0FBckIscUJBQXFCLENBQTRDO1FBQ2pFLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBaUM7SUFDeEUsQ0FBQztJQUVKLFNBQVMsR0FBRyxDQUFDLGdCQUF1QyxFQUFFLEVBQUU7UUFDdEQsSUFBSTtZQUNGLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUMzRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxLQUFLLFlBQVksMkNBQTJDLEVBQUU7Z0JBQ2hFLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsK0JBQStCLEVBQy9CO29CQUNFLE9BQU8sRUFBRSx5QkFBeUIsS0FBSyxDQUFDLEdBQUcsaUJBQWlCO29CQUM1RCxVQUFVLEVBQ1IsK0VBQStFO2lCQUNsRixFQUNELEtBQUssQ0FDTixDQUFDO2FBQ0g7WUFDRCxNQUFNLEtBQUssQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDbEMsQ0FBQyxDQUFDO0lBRU0sd0JBQXdCLEdBQUcsR0FBRyxFQUFFO1FBQ3RDLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzlCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUU7WUFDaEUsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUU7Z0JBQ1AsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQ3pCLE9BQU8sRUFBRSxHQUFHLEVBQUU7d0JBQ1osT0FBTyxJQUFJLENBQUMsU0FBUyxDQUNuQixJQUFJLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLEVBQUUsQ0FDcEQsQ0FBQztvQkFDSixDQUFDO2lCQUNGLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWcgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpZW50LWNvbmZpZyc7XG5pbXBvcnQge1xuICBDdXN0b21PdXRwdXQsXG4gIGN1c3RvbU91dHB1dEtleSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXNjaGVtYXMnO1xuaW1wb3J0IHsgTGF6eSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7XG4gIEFtcGxpZnlVc2VyRXJyb3IsXG4gIE9iamVjdEFjY3VtdWxhdG9yLFxuICBPYmplY3RBY2N1bXVsYXRvclByb3BlcnR5QWxyZWFkeUV4aXN0c0Vycm9yLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgY3VzdG9tIG91dHB1dHMgYXMgdGhleSdyZSBhZGRlZCB0byB0aGUgYmFja2VuZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEN1c3RvbU91dHB1dHNBY2N1bXVsYXRvciB7XG4gIHByaXZhdGUgaGFzQmFja2VuZE91dHB1dEVudHJ5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgY3VzdG9tIG91dHB1dHMgYWNjdW11bGF0b3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dFN0b3JhZ2VTdHJhdGVneTogQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneTxDdXN0b21PdXRwdXQ+LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50Q29uZmlnQWNjdW11bGF0b3I6IE9iamVjdEFjY3VtdWxhdG9yPENsaWVudENvbmZpZz5cbiAgKSB7fVxuXG4gIGFkZE91dHB1dCA9IChjbGllbnRDb25maWdQYXJ0OiBQYXJ0aWFsPENsaWVudENvbmZpZz4pID0+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jbGllbnRDb25maWdBY2N1bXVsYXRvci5hY2N1bXVsYXRlKGNsaWVudENvbmZpZ1BhcnQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPYmplY3RBY2N1bXVsYXRvclByb3BlcnR5QWxyZWFkeUV4aXN0c0Vycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICdPdXRwdXRFbnRyeUFscmVhZHlFeGlzdHNFcnJvcicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZTogYE91dHB1dCBlbnRyeSB3aXRoIGtleSAke2Vycm9yLmtleX0gYWxyZWFkeSBleGlzdHNgLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICAgXCJDaGVjayBpZiAnYmFja2VuZC5hZGRPdXRwdXQnIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIG92ZXJsYXBwaW5nIGlucHV0c1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICB0aGlzLmVuc3VyZUJhY2tlbmRPdXRwdXRFbnRyeSgpO1xuICB9O1xuXG4gIHByaXZhdGUgZW5zdXJlQmFja2VuZE91dHB1dEVudHJ5ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmhhc0JhY2tlbmRPdXRwdXRFbnRyeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm91dHB1dFN0b3JhZ2VTdHJhdGVneS5hZGRCYWNrZW5kT3V0cHV0RW50cnkoY3VzdG9tT3V0cHV0S2V5LCB7XG4gICAgICB2ZXJzaW9uOiAnMScsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIGN1c3RvbU91dHB1dHM6IExhenkuc3RyaW5nKHtcbiAgICAgICAgICBwcm9kdWNlOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgIHRoaXMuY2xpZW50Q29uZmlnQWNjdW11bGF0b3IuZ2V0QWNjdW11bGF0ZWRPYmplY3QoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy5oYXNCYWNrZW5kT3V0cHV0RW50cnkgPSB0cnVlO1xuICB9O1xufVxuIl19