import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';
import { Duration } from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as path from 'path';
import { Runtime as LambdaRuntime } from 'aws-cdk-lib/aws-lambda';
import { Provider } from 'aws-cdk-lib/custom-resources';
import { fileURLToPath } from 'url';
import { ParameterPathConversions } from '@aws-amplify/platform-core';
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);
const resourcesRoot = path.normalize(path.join(dirname, 'lambda'));
const backendSecretLambdaFilePath = path.join(resourcesRoot, 'backend_secret_fetcher.js');
/**
 * The factory to create secret-fetcher provider.
 */
export class BackendSecretFetcherProviderFactory {
    /**
     * Returns a resource provider if it exists in the input scope. Otherwise,
     * creates a new provider.
     */
    getOrCreateInstance = (scope, providerId, backendIdentifier) => {
        const provider = scope.node.tryFindChild(providerId);
        if (provider) {
            return provider;
        }
        const secretLambda = new NodejsFunction(scope, `${providerId}Lambda`, {
            runtime: LambdaRuntime.NODEJS_18_X,
            timeout: Duration.seconds(10),
            entry: backendSecretLambdaFilePath,
            handler: 'handler',
        });
        const backendParameterPrefix = ParameterPathConversions.toParameterPrefix(backendIdentifier);
        const sharedParameterPrefix = ParameterPathConversions.toParameterPrefix(backendIdentifier.namespace);
        secretLambda.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['ssm:GetParameter'],
            resources: [
                `arn:aws:ssm:*:*:parameter${backendParameterPrefix}/*`,
                `arn:aws:ssm:*:*:parameter${sharedParameterPrefix}/*`,
            ],
        }));
        return new Provider(scope, providerId, {
            onEventHandler: secretLambda,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9wcm92aWRlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX3Byb3ZpZGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRXBDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXRFLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDM0MsYUFBYSxFQUNiLDJCQUEyQixDQUM1QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBQzlDOzs7T0FHRztJQUNILG1CQUFtQixHQUFHLENBQ3BCLEtBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLGlCQUFvQyxFQUNwQyxFQUFFO1FBQ0YsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFhLENBQUM7UUFDakUsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLFVBQVUsUUFBUSxFQUFFO1lBQ3BFLE9BQU8sRUFBRSxhQUFhLENBQUMsV0FBVztZQUNsQyxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDN0IsS0FBSyxFQUFFLDJCQUEyQjtZQUNsQyxPQUFPLEVBQUUsU0FBUztTQUNuQixDQUFDLENBQUM7UUFFSCxNQUFNLHNCQUFzQixHQUMxQix3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0scUJBQXFCLEdBQUcsd0JBQXdCLENBQUMsaUJBQWlCLENBQ3RFLGlCQUFpQixDQUFDLFNBQVMsQ0FDNUIsQ0FBQztRQUVGLFlBQVksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQzlDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN0QixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQ3hCLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO1lBQzdCLFNBQVMsRUFBRTtnQkFDVCw0QkFBNEIsc0JBQXNCLElBQUk7Z0JBQ3RELDRCQUE0QixxQkFBcUIsSUFBSTthQUN0RDtTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsT0FBTyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1lBQ3JDLGNBQWMsRUFBRSxZQUFZO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBOb2RlanNGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEtbm9kZWpzJztcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFJ1bnRpbWUgYXMgTGFtYmRhUnVudGltZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdhd3MtY2RrLWxpYi9jdXN0b20tcmVzb3VyY2VzJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucyB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuY29uc3QgZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBkaXJuYW1lID0gcGF0aC5kaXJuYW1lKGZpbGVuYW1lKTtcbmNvbnN0IHJlc291cmNlc1Jvb3QgPSBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4oZGlybmFtZSwgJ2xhbWJkYScpKTtcbmNvbnN0IGJhY2tlbmRTZWNyZXRMYW1iZGFGaWxlUGF0aCA9IHBhdGguam9pbihcbiAgcmVzb3VyY2VzUm9vdCxcbiAgJ2JhY2tlbmRfc2VjcmV0X2ZldGNoZXIuanMnXG4pO1xuXG4vKipcbiAqIFRoZSBmYWN0b3J5IHRvIGNyZWF0ZSBzZWNyZXQtZmV0Y2hlciBwcm92aWRlci5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tlbmRTZWNyZXRGZXRjaGVyUHJvdmlkZXJGYWN0b3J5IHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXNvdXJjZSBwcm92aWRlciBpZiBpdCBleGlzdHMgaW4gdGhlIGlucHV0IHNjb3BlLiBPdGhlcndpc2UsXG4gICAqIGNyZWF0ZXMgYSBuZXcgcHJvdmlkZXIuXG4gICAqL1xuICBnZXRPckNyZWF0ZUluc3RhbmNlID0gKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgcHJvdmlkZXJJZDogc3RyaW5nLFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllclxuICApID0+IHtcbiAgICBjb25zdCBwcm92aWRlciA9IHNjb3BlLm5vZGUudHJ5RmluZENoaWxkKHByb3ZpZGVySWQpIGFzIFByb3ZpZGVyO1xuICAgIGlmIChwcm92aWRlcikge1xuICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgIH1cblxuICAgIGNvbnN0IHNlY3JldExhbWJkYSA9IG5ldyBOb2RlanNGdW5jdGlvbihzY29wZSwgYCR7cHJvdmlkZXJJZH1MYW1iZGFgLCB7XG4gICAgICBydW50aW1lOiBMYW1iZGFSdW50aW1lLk5PREVKU18xOF9YLFxuICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygxMCksXG4gICAgICBlbnRyeTogYmFja2VuZFNlY3JldExhbWJkYUZpbGVQYXRoLFxuICAgICAgaGFuZGxlcjogJ2hhbmRsZXInLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYmFja2VuZFBhcmFtZXRlclByZWZpeCA9XG4gICAgICBQYXJhbWV0ZXJQYXRoQ29udmVyc2lvbnMudG9QYXJhbWV0ZXJQcmVmaXgoYmFja2VuZElkZW50aWZpZXIpO1xuICAgIGNvbnN0IHNoYXJlZFBhcmFtZXRlclByZWZpeCA9IFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1BhcmFtZXRlclByZWZpeChcbiAgICAgIGJhY2tlbmRJZGVudGlmaWVyLm5hbWVzcGFjZVxuICAgICk7XG5cbiAgICBzZWNyZXRMYW1iZGEuZ3JhbnRQcmluY2lwYWwuYWRkVG9QcmluY2lwYWxQb2xpY3koXG4gICAgICBuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgIGVmZmVjdDogaWFtLkVmZmVjdC5BTExPVyxcbiAgICAgICAgYWN0aW9uczogWydzc206R2V0UGFyYW1ldGVyJ10sXG4gICAgICAgIHJlc291cmNlczogW1xuICAgICAgICAgIGBhcm46YXdzOnNzbToqOio6cGFyYW1ldGVyJHtiYWNrZW5kUGFyYW1ldGVyUHJlZml4fS8qYCxcbiAgICAgICAgICBgYXJuOmF3czpzc206KjoqOnBhcmFtZXRlciR7c2hhcmVkUGFyYW1ldGVyUHJlZml4fS8qYCxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgUHJvdmlkZXIoc2NvcGUsIHByb3ZpZGVySWQsIHtcbiAgICAgIG9uRXZlbnRIYW5kbGVyOiBzZWNyZXRMYW1iZGEsXG4gICAgfSk7XG4gIH07XG59XG4iXX0=